{"ast":null,"code":"import { __decorate, __metadata } from 'tslib';\nimport { ɵɵdefineInjectable, Injectable, EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';\nimport { OnChange } from 'ngx-bootstrap/utils';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction AlertComponent_ng_template_0_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function AlertComponent_ng_template_0_ng_template_1_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r2.close();\n    });\n    ɵngcc0.ɵɵelementStart(1, \"span\", 3);\n    ɵngcc0.ɵɵtext(2, \"\\u00D7\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"span\", 4);\n    ɵngcc0.ɵɵtext(4, \"Close\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction AlertComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(1, AlertComponent_ng_template_0_ng_template_1_Template, 5, 0, \"ng-template\", 0);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(\"alert alert-\" + ctx_r0.type);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r0.classes);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.dismissible);\n  }\n}\n\nconst _c0 = [\"*\"];\nlet AlertConfig = /*#__PURE__*/(() => {\n  class AlertConfig {\n    constructor() {\n      /** default alert type */\n      this.type = 'warning';\n      /** is alerts are dismissible by default */\n\n      this.dismissible = false;\n      /** default time before alert will dismiss */\n\n      this.dismissOnTimeout = undefined;\n    }\n\n  }\n\n  AlertConfig.ɵfac = function AlertConfig_Factory(t) {\n    return new (t || AlertConfig)();\n  };\n\n  AlertConfig.ɵprov = ɵɵdefineInjectable({\n    factory: function AlertConfig_Factory() {\n      return new AlertConfig();\n    },\n    token: AlertConfig,\n    providedIn: \"root\"\n  });\n  return AlertConfig;\n})();\nlet AlertComponent = /*#__PURE__*/(() => {\n  class AlertComponent {\n    constructor(_config, changeDetection) {\n      this.changeDetection = changeDetection;\n      /** Alert type.\n       * Provides one of four bootstrap supported contextual classes:\n       * `success`, `info`, `warning` and `danger`\n       */\n\n      this.type = 'warning';\n      /** If set, displays an inline \"Close\" button */\n\n      this.dismissible = false;\n      /** Is alert visible */\n\n      this.isOpen = true;\n      /** This event fires immediately after close instance method is called,\n       * $event is an instance of Alert component.\n       */\n\n      this.onClose = new EventEmitter();\n      /** This event fires when alert closed, $event is an instance of Alert component */\n\n      this.onClosed = new EventEmitter();\n      this.classes = '';\n      this.dismissibleChange = new EventEmitter();\n      Object.assign(this, _config);\n      this.dismissibleChange.subscribe(() => {\n        this.classes = this.dismissible ? 'alert-dismissible' : '';\n        this.changeDetection.markForCheck();\n      });\n    }\n\n    ngOnInit() {\n      if (this.dismissOnTimeout) {\n        // if dismissOnTimeout used as attr without binding, it will be a string\n        setTimeout(() => this.close(), parseInt(this.dismissOnTimeout, 10));\n      }\n    } // todo: animation ` If the .fade and .in classes are present on the element,\n    // the alert will fade out before it is removed`\n\n    /**\n     * Closes an alert by removing it from the DOM.\n     */\n\n\n    close() {\n      if (!this.isOpen) {\n        return;\n      }\n\n      this.onClose.emit(this);\n      this.isOpen = false;\n      this.changeDetection.markForCheck();\n      this.onClosed.emit(this);\n    }\n\n  }\n\n  AlertComponent.ɵfac = function AlertComponent_Factory(t) {\n    return new (t || AlertComponent)(ɵngcc0.ɵɵdirectiveInject(AlertConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  AlertComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AlertComponent,\n    selectors: [[\"alert\"], [\"bs-alert\"]],\n    inputs: {\n      type: \"type\",\n      dismissible: \"dismissible\",\n      isOpen: \"isOpen\",\n      dismissOnTimeout: \"dismissOnTimeout\"\n    },\n    outputs: {\n      onClose: \"onClose\",\n      onClosed: \"onClosed\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"ngIf\"], [\"role\", \"alert\", 3, \"ngClass\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"close\", 3, \"click\"], [\"aria-hidden\", \"true\"], [1, \"sr-only\"]],\n    template: function AlertComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, AlertComponent_ng_template_0_Template, 3, 4, \"ng-template\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isOpen);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgClass],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([OnChange(), __metadata(\"design:type\", Object)], AlertComponent.prototype, \"dismissible\", void 0);\n\n  return AlertComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AlertModule = /*#__PURE__*/(() => {\n  class AlertModule {\n    static forRoot() {\n      return {\n        ngModule: AlertModule,\n        providers: []\n      };\n    }\n\n  }\n\n  AlertModule.ɵfac = function AlertModule_Factory(t) {\n    return new (t || AlertModule)();\n  };\n\n  AlertModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: AlertModule\n  });\n  AlertModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return AlertModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AlertModule, {\n    declarations: function () {\n      return [AlertComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [AlertComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AlertComponent, AlertConfig, AlertModule }; //# sourceMappingURL=ngx-bootstrap-alert.js.map","map":null,"metadata":{},"sourceType":"module"}